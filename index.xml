<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shubham Utwal</title>
    <link>https://darkdefender27.github.io/</link>
    <description>Recent content on Shubham Utwal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://github.com/darkdefender27&#34;&gt;Shubham Utwal&lt;/a&gt; 2016</copyright>
    <lastBuildDate>Tue, 26 Mar 2019 23:13:20 +0530</lastBuildDate>
    
	<atom:link href="https://darkdefender27.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Essential Postgresql Queries</title>
      <link>https://darkdefender27.github.io/posts/postgresql-commands/</link>
      <pubDate>Tue, 26 Mar 2019 23:13:20 +0530</pubDate>
      
      <guid>https://darkdefender27.github.io/posts/postgresql-commands/</guid>
      <description>This post has a collated list of postgresql queries (taken from multiple sources) which are used on an almost daily basis.
Age of unfrozen rows SELECT c.oid::regclass as table_name, greatest(age(c.relfrozenxid),age(t.relfrozenxid)) as age FROM pg_class c LEFT JOIN pg_class t ON c.reltoastrelid = t.oid WHERE c.relkind IN (&amp;#39;r&amp;#39;, &amp;#39;m&amp;#39;);SELECT datname, age(datfrozenxid) FROM pg_database; The age column measures the number of transactions from the cutoff XID to the current transaction&amp;rsquo;s XID. Here, the cutoff XID, relfrozenxid is the freeze cutoff XID that was used by the last whole-table VACUUM; likewise datfrozenxid is the lower bound on unfrozen XIDs for that database.</description>
    </item>
    
    <item>
      <title>IN/Clojure 2019</title>
      <link>https://darkdefender27.github.io/posts/in-clojure-2019/</link>
      <pubDate>Sat, 19 Jan 2019 23:26:56 +0530</pubDate>
      
      <guid>https://darkdefender27.github.io/posts/in-clojure-2019/</guid>
      <description>Recently, I attended the ((((IN/Clojure)))) workshop which took place in Bangalore. The workshop was designed for two levels, a beginner &amp;amp; an intermediate one. Since, I had some previous knowledge around clojure, I signed up for the intermediate workshop.
The day of the workshop, we were expected to be ready with our own crazy setup, as long as it worked. Since, we are on the this, one could have a working clojure environment setup in Vim, Visual Studio Code, Sublime Text, Emacs, Spacemacs, IntelliJ (with Cursive) and what not.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://darkdefender27.github.io/about/</link>
      <pubDate>Sat, 19 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://darkdefender27.github.io/about/</guid>
      <description>Hey Guys,
I&amp;rsquo;m Shubham Utwal - Software Engineer currently working at GO-JEK. I also have a history of working in the Fintech &amp;amp; Gaming industries. Distributed Systems &amp;amp; Data are the things which interests me. I also follow and play Football (Bar√ßa fan!). I do photography, albeit rare.
Contact me at: shubhamutwal@gmail.com</description>
    </item>
    
    <item>
      <title>Apache Wsgi Configuration</title>
      <link>https://darkdefender27.github.io/posts/apache-wsgi-configuration/</link>
      <pubDate>Sat, 17 Feb 2018 12:44:44 +0530</pubDate>
      
      <guid>https://darkdefender27.github.io/posts/apache-wsgi-configuration/</guid>
      <description>TLDR; In this post I have put down my experience in configuring apache to interact with apps written in Python.
The bulk of this post is about how to set up Gunicorn as a WSGI HTTP Server to launch Python application(s) using the Flask micro-framework and Apache to act as a frontend reverse proxy.</description>
    </item>
    
  </channel>
</rss>